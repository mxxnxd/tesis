function checkAllSymptoms(facts, disease) {
	if (!checkSymptoms(facts, disease)) {
		return false;
	}
	console.log('Key Symptoms: PASSED');

	return true;
}

function checkSymptoms(facts, disease) {
	const current_symptoms = facts.user.symptoms;
	const disease_symptoms = facts.agent.questions[disease];

	// Check symptoms of this category
	const category_symptoms = disease_symptoms;
	var false_key_symptoms = 0;
	var threshhold = 4; 								// Atleast n symptoms, fetched from KB
	var length = category_symptoms.length;
						
	for (i = 0; i <  length; i++) {
		let symptom = category_symptoms[i];
		
		if (current_symptoms[symptom] === undefined) { 	// User has not determined this symptom. 					
			facts.agent.next_action = new Action('ASK', symptom.toUpperCase(), disease_symptoms[category][symptom].type, 'INIT');
			return false;

		} else if (current_symptoms[symptom].value) {	// User has determined this symptom to be True.					
			let current_type = current_symptoms[symptom].type;
			let disease_type = disease_symptoms[category][symptom].type;

			if (current_type !== disease_type && disease_type === 'RATE') {
				facts.agent.next_action = new Action('ASK', symptom.toUpperCase(), disease_type, 'REDO');
				return false;
			} 
		} else { 										// User has determined this symptom to be False.
			false_key_symptoms++;

			// Threshold to Pass?						// Find a Threshold
			if (length - threshhold <= false_key_symptoms) {
				return false;
			}
		}															
	}
	return true;
}



// determine which disease to focus on after initial input
const determineInitialDisease = (facts) => {
	const matches = [];
	const user_symptoms = facts.positive_symptoms;
	for (const {disease, symptom} of disease_symptom) {
		// uses every() so it wont recognize if user input is from different diseases 
		if (user_symptoms.every(temp => symptom.includes(temp.toLowerCase()))) { // we could change the json file to all caps, otherwise keep toLowerCase()
			matches.push(disease);
		}
	}
	//console.log('matches: ' + matches)
	return {matches, user_symptoms};
}

const prioritizeDiseasesRules = {
	id: 'priority',
	priority: PRIORITY + 50,
	condition: (R, facts) => {
		R.when(facts.user.start);	// when the initial input starts
	},
	consequence: (R, facts) => {
		const initial = determineInitialDisease(facts.user);
		console.log(initial)
		for (i = 0; i < initial.matches.length; i++) {
			R.prioritize(PRIORITY + 49 - i, {id: initial.matches[i]});
		}
		facts.user.start = false;
		R.stop();
		// R.next();
	}
}


// Update facts w/ possible diseases based on current symptoms.
const determinePossibleDiseases = {
	priority: PRIORITY + 10,
	condition: (R, facts) => {
		R.when(true);
	},
	consequence: (R, facts) => {
		diseases.forEach(disease => {
			for (i = 0; i < disease.symptoms.length; i++) {
				const current_symptom = facts.user.symptoms[disease.symptoms[i]];
				if (current_symptom || current_symptom === undefined) {
					facts.user.possible_diseases[disease.name] = true;
				} else {
					delete facts.user.possible_diseases[disease.name];
					break;
				}
			}
		});
		R.next();
	}
};


// const COPD = 'COPD';
// const ASTHMA = 'ASTHMA';
// const PNEUMONIA = 'PNEUMONIA';
// const LUNG_CANCER = 'LUNG_CANCER';
// const TUBERCULOSIS = 'TUBERCULOSIS';

// const HEARTFAILURE = 'HEART_FAILURE';
// const HYPERTENSION = 'HYPERTENSION';
// const CAD = 'CAD';
// const ARRHYTHMIA = 'ARRHYTHMIA';
// const CARDIOMYOPATHY = 'CARDIOMYOPATHY'
// const VALVEDISEASE = 'VALVE_DISEASE';
// const MYOCARDIALIN_FARCTION = 'MYOCARDIAL_INFARCTION';
// const ANEURYSM = 'ANEURYSM';

function checkAllSymptoms(facts, disease) {
	if (!checkSymptoms(facts, disease)) {
		return false;
	}
	console.log('Key Symptoms: PASSED');

	return true;
}

function checkSymptoms(facts, disease) {
	const current_symptoms = facts.user.symptoms;
	const disease_symptoms = facts.agent.questions.find(obj => obj.disease === disease);
	// console.log('here')
	// console.log(disease_symptoms.symptom.length)
	// Check symptoms of this category
	const category_symptoms = disease_symptoms.symptom;
	var false_key_symptoms = 0;
	var threshhold = 4; 								// Atleast n symptoms, fetched from KB
	var length = category_symptoms.length;
						
	for (i = 0; i <  length; i++) {
		let symptom = category_symptoms[i];
		let next_symptom =  category_symptoms[i + 1];
		if (current_symptoms[symptom] === undefined) { 	// User has not determined this symptom. 
			console.log('ask ' + symptom.toUpperCase());					
			facts.agent.next_action = new Action('ASK', symptom.toUpperCase());
			return false;
		} else if (current_symptoms[symptom].value) {	// User has determined this symptom to be True.
			facts.agent.next_action = new Action('ASK', next_symptom.toUpperCase());			
			return false;	
		} else { 										// User has determined this symptom to be False.
			false_key_symptoms++;
			console.log('false key symptom = ' + false_key_symptoms)

			// Threshold to Pass?						// Find a Threshold
			if (length - threshhold <= false_key_symptoms) {
				console.log('pass? ' +  (length - threshhold) + ' <= ' + false_key_symptoms);
				return false;
			}
		}															
	}
	return true;
}



const POSITIVE =  1;
const NEUTRAL  =  0;
const NEGATIVE = -1;





const state = {
    user: {
        symptoms: {
            fever: 1,
            dyspnea: 0,
            cough: 1,
        },
        age: 22,
    },
    agent: {
        next_action: null,
    }
}




async function check_copd(state) {
    const symptoms = ['dyspnea', 'cough'];
    const length = symptoms.length;
    let remain = [];
    let hits = 0;

    for (i = 0; i < length; i++) {
        if (state.user.symptoms[symptoms[i]] == 1) {
            hits++;
        } else {
            remain.push(symptoms[i]);
        }
    }
    return [hits, remain];
};







async function main() {


    console.log(await check_copd(state));
}

main();

